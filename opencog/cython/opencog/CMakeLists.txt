MACRO(BUILD_CYTHON PY_VERSION)
   	# Use this as a guide:
	# https://github.com/OpenKinect/libfreenect/blob/master/wrappers/python/CMakeLists.txt
    # Need to use -fno-strict-aliasing when compiling cython code, in order
    # to avoid nasty compiler warnings about aliasing.  Cython explicitly
    # performs aliasing, in order to emulate python object inheritance.
    # See, for example,
    # https://groups.google.com/forum/#!topic/cython-users/JV1-KvIUeIg

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-strict-aliasing")

	INCLUDE_DIRECTORIES(
		${PYTHON${PY_VERSION}_INCLUDE_DIRS}
		${CMAKE_CURRENT_SOURCE_DIR}
		${CMAKE_CURRENT_BINARY_DIR}
		)

	# Cythonizes one .pyx file into a .cpp file
	# Additional arguments are dependencies
	MACRO(CYTHON_ADD_MODULE_PYX name)
		IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${name}.pxd)
			SET(DEPENDS ${name}.pyx ${name}.pxd)
        ELSE(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${name}.pxd)
            SET(DEPENDS ${name}.pyx)
		ENDIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${name}.pxd)
		# Allow the user to specify dependencies as optional arguments
		SET(DEPENDS ${DEPENDS} ${ARGN})
		ADD_CUSTOM_COMMAND(
            OUTPUT ${name}.cpp
            COMMAND ${CYTHON_EXECUTABLE}
            ARGS -f
				-${PY_VERSION}
				-I ${PROJECT_BINARY_DIR}
				-o ${name}.cpp
				--cplus ${CMAKE_CURRENT_SOURCE_DIR}/${name}.pyx
            DEPENDS ${DEPENDS}
            COMMENT "Cythonizing ${name}.pyx using Python ${PY_VERSION} Libs")
	ENDMACRO(CYTHON_ADD_MODULE_PYX)

	###################### logger ##########################################
	CYTHON_ADD_MODULE_PYX(logger)
	list(APPEND ADDITIONAL_MAKE_CLEAN_FILES "logger.cpp"
		"../../util/Logger.h")

	ADD_LIBRARY(logger_cython SHARED
		logger.cpp
	)

    list(APPEND ADDITIONAL_MAKE_CLEAN_FILES
            "logger.cpp")

	TARGET_LINK_LIBRARIES(logger_cython
		${COGUTIL_LIBRARY}
		${PYTHON${PY_VERSION}_LIBRARIES}
	)

	SET_TARGET_PROPERTIES(logger_cython PROPERTIES
		PREFIX ""
		OUTPUT_NAME logger
    )

    INSTALL(TARGETS logger_cython
            DESTINATION ${PYTHON${PY_VERSION}_SITE_PACKAGES}/opencog)


	###################### atomspace ####################################
	CYTHON_ADD_MODULE_PYX(atomspace
		"atom.pyx" "nameserver.pyx" "truth_value.pyx"
		"atomspace_details.pyx" opencog_atom_types
		"../../truthvalue/TruthValue.h" "../../truthvalue/SimpleTruthValue.h"
		"../../atoms/proto/NameServer.h" "../../atoms/base/Handle.h"
		"../../atomspace/AtomSpace.h"
	)

	list(APPEND ADDITIONAL_MAKE_CLEAN_FILES "atomspace.cpp")
	list(APPEND ADDITIONAL_MAKE_CLEAN_FILES "atomspace_api.h")

	# opencog.atomspace Python bindings
	ADD_LIBRARY(atomspace_cython SHARED
		Cast.cc
		atomspace.cpp
	)

	# The atomspace_api.h must be generated before PythonEval is compiled, thus
	# this phony-target is created. Why not add_dependencies between PythonEval
	# and atomspace_cython? -> Because that results in a cyclic dependency.
	ADD_CUSTOM_TARGET(py_atomspace_header
		DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/atomspace.cpp)

	# XXX FIXME Cython should not static link the atom-types, but
	# but should instead dynamic-load them, as needed.
	ADD_DEPENDENCIES(atomspace_cython opencog_atom_types)

	TARGET_LINK_LIBRARIES(atomspace_cython
		${NO_AS_NEEDED}
		attentionbank
		execution
		atomspace
		atomutils
		clearbox
		atomspaceutils
		truthvalue
		atomcore
		${COGUTIL_LIBRARY}
		${PYTHON${PY_VERSION}_LIBRARIES}
		${Boost_THREAD_LIBRARY}
		${Boost_SYSTEM_LIBRARY}
	)

	SET_TARGET_PROPERTIES(atomspace_cython PROPERTIES
		PREFIX ""
		OUTPUT_NAME atomspace
    )

	# The cogserver needs the atomspace pxd file to get the Handle, Atom and
	# AtomSpace defintions during compilation. So this must be installed.
	INSTALL (FILES
		__init__.py
		atomspace.pxd
		Cast.h
		DESTINATION "include/opencog/cython/opencog"
	)

    INSTALL(TARGETS atomspace_cython
            DESTINATION ${PYTHON${PY_VERSION}_SITE_PACKAGES}/opencog)

	############################## type constructors #####################
	CYTHON_ADD_MODULE_PYX(type_constructors
		"atomspace.pxd" opencog_atom_types )

	list(APPEND ADDITIONAL_MAKE_CLEAN_FILES "type_constructors.cpp")

	ADD_LIBRARY(type_constructors SHARED
		type_constructors.cpp
	)

	TARGET_LINK_LIBRARIES(type_constructors
		atomspace
		${PYTHON${PY_VERSION}_LIBRARIES}
	)

	SET_TARGET_PROPERTIES(type_constructors PROPERTIES
		PREFIX ""
		OUTPUT_NAME type_constructors
    )

    INSTALL(TARGETS type_constructors
            DESTINATION ${PYTHON${PY_VERSION}_SITE_PACKAGES}/opencog)


	############################## utilities #####################
	CYTHON_ADD_MODULE_PYX(utilities
		"atomspace.pxd" opencog_atom_types )

	list(APPEND ADDITIONAL_MAKE_CLEAN_FILES "utilities.cpp")

	ADD_LIBRARY(utilities_cython SHARED
		Utilities.cc
		utilities.cpp
	)

	TARGET_LINK_LIBRARIES(utilities_cython
		PythonEval
		clearbox
		atomspace
		type_constructors
		${COGUTIL_LIBRARY}
		${PYTHON${PY_VERSION}_LIBRARIES}
		${Boost_THREAD_LIBRARY}
		${Boost_SYSTEM_LIBRARY}
	)

	SET_TARGET_PROPERTIES(utilities_cython PROPERTIES
		PREFIX ""
		OUTPUT_NAME utilities
    )

    INSTALL(TARGETS utilities_cython
            DESTINATION ${PYTHON${PY_VERSION}_SITE_PACKAGES}/opencog)

	############################## bindlink #####################
	CYTHON_ADD_MODULE_PYX(bindlink
		"atomspace.pxd" opencog_atom_types
		"../../query/BindLinkAPI.h")

	list(APPEND ADDITIONAL_MAKE_CLEAN_FILES "bindlink.cpp")

	ADD_LIBRARY(bindlink_cython SHARED
		BindlinkStub.cc
		bindlink.cpp
	)

	TARGET_LINK_LIBRARIES(bindlink_cython
		atomspace_cython
		query
		execution
		${PYTHON${PY_VERSION}_LIBRARIES}
		${Boost_THREAD_LIBRARY}
		${Boost_SYSTEM_LIBRARY}
	)

	SET_TARGET_PROPERTIES(bindlink_cython PROPERTIES
		PREFIX ""
		OUTPUT_NAME bindlink
    )

    INSTALL(TARGETS bindlink_cython
            DESTINATION ${PYTHON${PY_VERSION}_SITE_PACKAGES}/opencog)

	IF (HAVE_GUILE)
		############################## scheme wrapper #####################
		CYTHON_ADD_MODULE_PYX(scheme_wrapper
			"PyScheme.h" "atomspace.pxd" opencog_atom_types
			"../load-file.h")

		list(APPEND ADDITIONAL_MAKE_CLEAN_FILES "scheme_wrapper.cpp")

		ADD_LIBRARY(scheme_wrapper SHARED
			PyScheme
			scheme_wrapper.cpp
		)

		TARGET_LINK_LIBRARIES(scheme_wrapper
			atomspace_cython
			query
			execution
			smob
			${PYTHON${PY_VERSION}_LIBRARIES}
		)

		SET_TARGET_PROPERTIES(scheme_wrapper PROPERTIES
			PREFIX ""
			OUTPUT_NAME scheme_wrapper
		)

		INSTALL (TARGETS
			scheme_wrapper
			DESTINATION ${PYTHON${PY_VERSION}_SITE_PACKAGES}/opencog)
	ENDIF (HAVE_GUILE)


	INSTALL (FILES
		__init__.py
		DESTINATION ${PYTHON${PY_VERSION}_SITE_PACKAGES}/opencog)
ENDMACRO()

IF (PY_2_BINDINGS)
    BUILD_CYTHON(2)
ELSEIF (PY_3_BINDINGS)
    BUILD_CYTHON(3)
ENDIF
